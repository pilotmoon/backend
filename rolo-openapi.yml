openapi: "3.0.2"
info:
  title: Pilotmoon API
  contact:
    email: nick@pilotmoon.com
    name: Nick Moore
  version: "v2"
  description: Backend for pilotmoon.com services.
tags:
  - name: admin
  - name: ops
servers:
  - url: https://api.pilotmoon.com/v2
  - url: http://localhost:1234

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: Token looks like `sk_{live|test}_{40 hex chars}`

  schemas:
    ApiKeyInfo:
      type: object
      example:
        description: Blah blah
        scopes: [licenseKeys:create]
      properties:
        description:
          type: string
        scopes:
          type: array
          items:
            type: string
      required:
        - scopes

    LicenseKeyInfo:
      type: object
      example:
        name: Fred Bloggs
        product: com.example.product
      properties:
        name:
          type: string
        product:
          type: string
      required:
        - name
        - product

    RegistryInfo:
      type: object
      example:
        description: My registry
        identifiers: [unique.123]
      properties:
        description:
          type: string
        identifiers:
          type: array
          items:
            type: string
          minItems: 1
      required:
        - description
        - identifiers
security:
  - BearerAuth: []

paths:
  /health:
    get:
      operationId: health
      description: Get server health information.
      tags: [admin]
      responses:
        "200":
          description: OK

  /apiKeys:
    description: API keys.
    post:
      operationId: createApiKey
      description: Create a new API key.
      tags: [admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiKeyInfo"
      responses:
        "201":
          description: API key was created.

  /registries:
    description: Representions the collection of configuration registries.
    post:
      operationId: createRegistry
      description: Create a new registry.
      tags: [admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistryInfo"
      responses:
        "201":
          description: License key was created.

  /licenseKeys:
    description: Represents the collection of license keys.
    post:
      operationId: createLicenseKey
      description: Create a new license key from the supplied information.
      tags: [ops]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LicenseKeyInfo"
      responses:
        "201":
          description: License key was created.

  /licenseKeys/{id}:
    description: Represents a license key.
    get:
      operationId: readLicenseKey
      description: Retreive a license key by its id.
      tags: [ops]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: lk_rzmhagDluQujj1c0
      responses:
        "200":
          description: OK
