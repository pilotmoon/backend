import { z } from "zod";
import { getDb } from "../database";
import { assertScope, AuthContext } from "../controllers/authController";
import { handleControllerError } from "../errors";
import {
  genericIdRegex,
  KeyKind,
  keyKinds,
  randomIdentifier,
} from "../identifiers";
import { PaginateState } from "../middleware/processPagination";
import { ZPortableKeyPair } from "../keyPair";
import { decryptInPlace, encryptInPlace } from "../secrets";
import { AquaticPrime } from "@pilotmoon/aquatic-prime";
const plist = require("plist");

/*

# License Keys

## Example

An example license key file, in Apple Property List format (Plist),
which corresponds to a license key record in the database.

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Date</key>
	<string>2021-10-02</string>
	<key>Email</key>
	<string>kuntau17@gmail.com</string>
	<key>Name</key>
	<string>Kuntau</string>
	<key>Order</key>
	<string>244001-443922 (DIGITALYCHEE)</string>
	<key>Product</key>
	<string>com.pilotmoon.popclip/Special license</string>
  <key>Quantity</key>
	<string>3</string>
	<key>Signature</key>
	<data>
	G120nhjyBQ6qV8cbReR7P1aWQ+VZ1a/uKjEiqvqZBElevebmT5zi0C7JG7K1OEzY5y9f
	HbFaq91jjgOo2UmbfljxZVq3MQm0xsEtc8JK803tCTHLpSJL36RwJ48pHp9Dn5ng/54V
	GTQzxsWHS1SIvS3dijNdbnqFstKEXUCH48k=
	</data>
</dict>
</plist>

## License Key File Format

The license key file is signed with the private key for the associated product.

Noe that the Product field is a combination of the product identifier and the
description, separated by a forward slash. If there is no description, the
Product field is just the product identifier.

The Order field is a combination of the order number and the originator, at the end
of the string and enclosed in parentheses. If there is no originator,
the Order field is just the order number.

The date is a string in one of two formats:
- YYYY-MM-DD (preferred)
- 1 or 2 digit date, 3 letter month, and full year e.g. "2 Oct 2021"
Licenses should be generated with the preferred format, but the other format
is supported when PopClip reads license keys for backwards compatibility.

The Quantity field is optional. If it is not present, the license key is
valid for 1 user only. If it is present, the license key is valid for the
number of users specified in the Quantity field.

The Signature field is a Base64-encoded signature of the license key file
content, using the private key for the associated product. The signature
is generated using the AquaticPrime library.

The Signature field is not stored in the database. Instead, it is generated
on demand from the license key record. Similarly, the license key file itself
is generated on demand.

## License Key File Name

The plist file also has an associated filename. The filename is a derived from
the licensee name, sanitised to replace spaces and punctuation with underscores,
and then suffixed with a file extension such as ".popcliplicense". The filename
is not stored in the database. Instead, it is generated on demand from the
license key record. The file suffix is different for each product, and is
looked up from the product record in the database.

## License Key Generation

The license key record is generated by the server when a new license key is
created. The license key record is stored in the database, and the license
key file is generated on demand.

The license date is set to the current date at the time of creation.
When the plist is generated, the date is formatted in YYYY-MM-DD format
using the Europe/London timezone. (Since the server is in the UK, this
is the timezone that is used for all dates when they are represented
without a timezone.)

The license key record is not encrypted. It is stored in the database in
plain text.

The license key record in the database contains the following fields:
- _id: unique identifier for the license key, with prefix "lk_"
- object: literal string "licenseKey"
- created: date of creation of record
- name: name of the license key owner
- email: email address of the license key owner
- order: original order number from originator (e.g. "244001-443922")
- date: date of purchase as a JavaScript/MongoDB date object
- originator: originator of the purchase, such as reseller e.g. "DIGITALYCHEE", "FastSpring"
- product: licensed product identifier (e.g. "com.pilotmoon.popclip")
- quantity: number of users/seats covered by the license key
- description: description of the license key e.g. "Special license"

## Endpoints

### GET /licenseKeys

Returns a list of license keys.

### POST /licenseKeys

Creates a new license key.

### GET /licenseKeys/:id

Returns a license key record.

### PATCH /licenseKeys/:id

Updates a license key's details such as name and email address.
The range of fields that can be updated is limited to prevent
accidental changes to the product, order, and date fields.

### DELETE /licenseKeys/:id

Deletes a license key.

### GET /licenseKeys/:id/file

Returns a license key file in Apple Property List format (Plist).

If the Accept header allows "application/octet-stream", the endpoint
returns the license key file content directly, with the appropriate
Content-Type header and filename indicated in the Content-Disposition
header. This allows the browser to download the file directly.

Otherwise, the endpoint returns JSON with two fields:
- filename: the filename of the license key file
- data: the license key file content, as a Base64-encoded string
This is useful for testing, and for external servers that want to
access the license key file content using an API call.

*/

/*** Database ***/

// helper function to get the database collection for a given key kind
function dbc(kind: KeyKind) {
  return getDb(kind).collection<LicenseKeyRecord>("licenseKeys");
}

// called at server startup to create indexes
export async function init() {
  for (const kind of keyKinds) {
    const collection = dbc(kind);
    collection.createIndex({ created: 1 });
  }
}

/*** Schemas ***/

export const ZLicenseKeyInfo = z.object({
  // name of the license key owner
  name: z.string().min(1).max(100),
  // email address of the license key owner
  email: z.string().email().max(100).optional(),
  // original order number from originator (e.g. "244001-443922")
  order: z.string().min(1).max(100).optional(),
  // date of purchase as a javascript Date object
  date: z.date().optional(),
  // originator of the purchase, such as reseller e.g. "DIGITALYCHEE"
  originator: z.string().min(1).max(100).optional(),
  // licensed product identifier (e.g. "com.pilotmoon.popclip")
  product: z.string().regex(genericIdRegex).max(100),
  // number of users/seats covered by the license key
  quantity: z.number().int().positive().optional(),
  // description of the license key e.g. "Special license"
  description: z.string().max(100).optional(),
});
export type LicenseKeyInfo = z.infer<typeof ZLicenseKeyInfo>;

// schema for the parts of the info that can be updated later
export const ZLicenseKeyUpdate = ZLicenseKeyInfo.pick({
  name: true,
  email: true,
}).optional();

// schema for full license key record stored in database
export const ZLicenseKeyRecord = ZLicenseKeyInfo.extend({
  // unique identifier for the license key, with prefix "lk_"
  _id: z.string(),
  // literal string "licenseKey"
  object: z.literal("licenseKey"),
  // date of creation of record
  created: z.date(),
});
export type LicenseKeyRecord = z.infer<typeof ZLicenseKeyRecord>;

// schema for what is returned to the client, comprising the full record
// plus the license key file content and generated filename
export const ZLicenseKey = ZLicenseKeyRecord.extend({
  // license key file content, as a Base64-encoded string
  data: z.string(),
  // license key filename, e.g. "John_Doe.popcliplicense"
  filename: z.string(),
});
export type LicenseKey = z.infer<typeof ZLicenseKey>;
